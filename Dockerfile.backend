# Multi-stage build for Node.js backend
FROM node:20-alpine AS backend-build

# Install build dependencies
RUN apk add --no-cache python3 make g++ sqlite

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY server/package*.json ./server/ 2>/dev/null || true
COPY server/tsconfig.json ./server/

# Install dependencies
RUN npm ci && npm cache clean --force

# Copy server source code
COPY server/ ./server/

# Build the server
RUN npm run build:server

# Production stage
FROM node:20-alpine AS backend-production

# Install runtime dependencies
RUN apk add --no-cache sqlite curl

# Create app user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy package files and install production dependencies only
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy built server
COPY --from=backend-build /app/server/dist ./server/dist
COPY --chown=nodejs:nodejs server/database.sqlite ./server/ 2>/dev/null || true

# Create directory for database with proper permissions
RUN mkdir -p /app/data && chown nodejs:nodejs /app/data

# Switch to non-root user
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Expose port
EXPOSE 3001

# Set environment
ENV NODE_ENV=production

# Start the server
CMD ["node", "server/dist/index.js"]
