version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: sweetshop-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-sweetshop}
      POSTGRES_USER: ${DATABASE_USER:-sweetshop_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure_password_2025}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    networks:
      - sweetshop-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-sweetshop_user} -d ${DATABASE_NAME:-sweetshop}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: sweetshop-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${DATABASE_USER:-sweetshop_user}:${DATABASE_PASSWORD:-secure_password_2025}@database:5432/${DATABASE_NAME:-sweetshop}
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-key-2025}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - sweetshop-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: sweetshop-web
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - sweetshop-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching and sessions (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: sweetshop-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_2025}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - sweetshop-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  sweetshop-network:
    driver: bridge
    name: sweetshop-network

volumes:
  postgres_data:
    name: sweetshop_postgres_data
  redis_data:
    name: sweetshop_redis_data
